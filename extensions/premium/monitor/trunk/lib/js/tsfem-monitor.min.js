/**
 * This file holds Monitor extension for The SEO Framework plugin's JS code.
 * Serve JavaScript as an addition, not as an ends or means.
 *
 * @author Sybre Waaijer https://cyberwire.nl/
 * @pluginURI https://wordpress.org/plugins/the-seo-framework-extension-manager/
 */

/**
 * Monitor extension for The SEO Framework
 * Copyright (C) 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name tsfem_e_monitor.min.js
// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/jquery-1.9.js
// @js_externs /** @constructor */ function tsfem_e_monitor() {}; /** @constructor */ function tsfem() {}; /** @type {Array|string} */ var tsfem_e_monitorL10n; /** @type {Array|string} */ var tsfemL10n; /** @param {(function(String))} arg1 * @return {!jQuery} */ tsfem.setAjaxLoader = function(arg1) {}; /** @param {(function(String))} arg1 * @return {!jQuery} */ tsfem.resetAjaxLoader = function(arg1) {}; /** @param {string} arg1 * @param {number} arg2 * @param {string} arg3 * @param {number} arg4 @return {!jQuery} */ tsfem.unsetAjaxLoader = function(arg1, arg2, arg3, arg4) {};
// ==/ClosureCompiler==
// http://closure-compiler.appspot.com/home
// @todo create externs file for tsfem as more extensions tend to use it.

/* global tsfem_e_monitor, tsfem, tsfem_e_monitorL10n, tsfemL10n  */

/**
 * Advanced Optimizations caused me to move away from dot annotations, as they
 * get wrongfully minified.
 */

/**
 * Holds tsfem_e_monitor values in an object to avoid polluting global namespace.
 *
 * @since 1.0.0
 *
 * @constructor
 */
window[ 'tsfem_e_monitor' ] = {

	/**
	 * @since 1.0.0
	 * @param {String} nonce Ajax nonce
	 */
	nonce : tsfem_e_monitorL10n['nonce'],

	/**
	 * @since 1.0.0
	 * @param {Array} i18n Localized strings
	 */
	i18n : tsfem_e_monitorL10n['i18n'],

	/**
	 * @since 1.0.0
	 * @param {Boolean} rtl RTL enabled
	 */
	rtl : tsfemL10n['rtl'],

	/**
	 * @since 1.0.0
	 * @param {Boolean} debug Debugging enabled
	 */
	debug : tsfemL10n['debug'],

	/**
	 * Expands readmore button's content whilst removing button.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {Object} event jQuery event
	 */
	showReadMore: function( event ) {
		'use strict';

		var $parent = jQuery( '#' + event.target.id + '-wrap' ),
			$content = jQuery( '#' + event.target.id + '-content' );

		$parent.remove();
		$content.slideDown( 500 );
	},

	/**
	 * Updates the data option and returns new values.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {jQuery.event} event
	 */
	updateData: function( event ) {
		'use strict';

		var loading = 'tsfem-button-disabled tsfem-button-loading',
			$button = jQuery( event.target ),
			loader = '#tsfem-e-monitor-issues-pane .tsfem-pane-header .tsfem-ajax, #tsfem-e-monitor-stats-pane .tsfem-pane-header .tsfem-ajax',
			status = 0;

		if ( $button.prop( 'disabled' ) )
			return;

		$button.addClass( loading );
		$button.prop( 'disabled', true );

		//* Reset ajax loader
		tsfem.resetAjaxLoader( loader );

		//* Set ajax loader.
		tsfem.setAjaxLoader( loader );

		//* Setup external update.
		var settings = {
			method: 'POST',
			url: ajaxurl,
			datatype: 'json',
			data: {
				'action' : 'tsfem_e_monitor_update',
				'nonce' : tsfem_e_monitor.nonce,
			},
			timeout: 10000,
			async: true,
			success: function( response ) {

				response = jQuery.parseJSON( response );

				if ( 'success' === response.type && response.content ) {
					status = 1;

				//	setTimeout( function() { tsfem.updatedResponse( loader, status, '', 0 ); }, 1000 );
				} else if ( 'unknown' === response.type ) {
					status = 2;
					jQuery( '.tsfem-trends-wrap' ).empty().append( response.content );
				//	tsfem.updatedResponse( loader, status, '', 0 );
				} else {
				//	$button.removeClass( loading );
					$button.prop( 'disabled', false );
				//	tsfem.updatedResponse( loader, status, '', 0 );
				}
			},
			error: function() {
			//	$button.removeClass( loading );
				$button.prop( 'disabled', false );
			//	tsfem.updatedResponse( loader, status, '', 0 );
			},
		}

		jQuery.ajax( settings );
	},

	/**
	 * Initialises all aspects of the scripts.
	 *
	 * Generally ordered with stuff that inserts new elements into the DOM first,
	 * then stuff that triggers an event on existing DOM elements when ready,
	 * followed by stuff that triggers an event only on user interaction. This
	 * keeps any screen jumping from occuring later on.
	 *
	 * @since 1.0.0
	 *
	 * @param {Object} jQ jQuery
	 * @function
	 */
	ready: function( jQ ) {
		'use strict';

		// Disable semi-disabled buttons.
		jQ( 'a#tsfem-e-monitor-privacy-readmore' ).on( 'click touchstart MSPointerDown', tsfem_e_monitor.showReadMore );

		// AJAX data update.
		jQ( 'a#tsfem-e-monitor-update-button' ).on( 'click', tsfem_e_monitor.updateData );

	}
};
jQuery( tsfem_e_monitor.ready );
