/**
 * This file holds The SEO Framework Extension Manager plugin's JS code.
 * Serve JavaScript as an addition, not as an ends or means.
 *
 * @author Sybre Waaijer https://cyberwire.nl/
 * @pluginURI https://wordpress.org/plugins/the-seo-framework-extension-manager/
 */

/**
 * The SEO Framework - Extension Manager plugin
 * Copyright (C) 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name tsf-extension-manager.min.js
// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/jquery-1.9.js
// @js_externs /** @constructor */ function tsfem() {}; /** @type {Array|string} */ var tsfemL10n;
// ==/ClosureCompiler==
// http://closure-compiler.appspot.com/home

/* global tsfem, tsfemL10n  */

/**
 * Advanced Optimizations caused me to move away from dot annotations, as they
 * get wrongfully minified.
 */

/**
 * Holds tsfem values in an object to avoid polluting global namespace.
 *
 * @since 1.0.0
 *
 * @constructor
 */
window[ 'tsfem' ] = {

	/**
	 * @since 1.0.0
	 * @param {String} nonce Ajax nonce
	 */
	nonce : tsfemL10n['nonce'],

	/**
	 * @since 1.0.0
	 * @param {Array} i18n Localized strings
	 */
	i18n : tsfemL10n['i18n'],

	/**
	 * Visualizes AJAX loading time through target class change.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 */
	setAjaxLoader: function( target ) {
		'use strict';

		jQuery( target ).toggleClass( 'tsfem-loading' );
	},

	/**
	 * Adjusts class loaders on Ajax response.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 * @param {Integer} success
	 * @param {String} notice
	 */
	unsetAjaxLoader: function( target, success, notice ) {
		'use strict';

		var $newclass = 'tsfem-success',
			$fade = 2500;

		if ( ! success ) {
			$newclass = 'tsfem-error';
			$fade = 5000;
		} else if ( 2 === success ) {
			$newclass = 'tsfem-unknown';
			$fade = 5000;
		}

		//* Slow down if there's a notice.
		$fade = notice ? $fade * 2 : $fade;

		jQuery( target ).removeClass( 'tsfem-loading' ).addClass( $newclass ).text( notice ).fadeOut( $fade );
	},

	/**
	 * Cleans and resets Ajax wrapper class and contents to default.
	 * Also stops any animation and resets fadeout to beginning.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 */
	resetAjaxLoader: function( target ) {
		'use strict';

		jQuery( target ).stop().empty().prop( 'class', 'tsfem-ajax' ).css( 'opacity', '1' ).removeProp( 'style' );
	},

	/**
	 * Updates the feed option.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {jQuery.event} event
	 */
	updateFeed: function( event ) {
		'use strict';

		var $button = jQuery( event.target ),
			loader = '#tsfem-feed-ajax',
			status = 0;

		$button.addClass( 'tsfem-button-disabled' );
		$button.prop( 'disabled', true );

		//* Reset ajax loader
		tsfem.resetAjaxLoader( loader );

		//* Set ajax loader.
		tsfem.setAjaxLoader( loader );

		//* Setup external update.
		var settings = {
			method: 'POST',
			url: ajaxurl,
			datatype: 'json',
			data: {
				'action' : 'tsfem_enable_feeds',
				'nonce' : tsfem.nonce,
			},
			timeout: 10000,
			async: true,
			success: function( response ) {

				response = jQuery.parseJSON( response );

				if ( 'success' === response.type && response.content ) {
					status = 1;
					jQuery( '.tsfem-trends-wrap' ).empty().css( 'opacity', 0 ).append( response.content ).css( 'opacity', 1 ).children( '.tsfem-feed-wrap' ).css(
						{ 'opacity' : 0, 'max-height' : '0px' }
					).animate(
						{ 'max-height' : '3000px', 'opacity' : 1 },
						{ queue: true, duration: 2000 },
						'swing'
					);
					setTimeout( function() { tsfem.updatedResponse( loader, status, '' ); }, 1000 );
				} else if ( 'unknown' === response.type ) {
					status = 2;
					jQuery( '.tsfem-trends-wrap' ).empty().append( response.content );
					tsfem.updatedResponse( loader, status, '' );
				} else {
					$button.removeClass( 'tsfem-button-disabled' );
					$button.prop( 'disabled', false );
					tsfem.updatedResponse( loader, status, '' );
				}
			},
			error: function() {
				$button.removeClass( 'tsfem-button-disabled' );
				$button.prop( 'disabled', false );
				tsfem.updatedResponse( loader, status, '' );
			},
		}

		jQuery.ajax( settings );
	},

	/**
	 * Updates the selected extension state.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {jQuery.event} event
	 */
	updateExtension: function( event ) {
		'use strict';

		var $button = jQuery( event.target ),
			$buttons = jQuery( '.tsfem-button-extension-activate, .tsfem-button-extension-deactivate' ),
			loader = '#tsfem-extensions-ajax',
			loaderText = '#tsfem-extensions-ajax-prepend',
			actionSlug = $button.data( 'slug' ),
			actionCase = $button.data( 'case' );

		//* This should be made more efficicient...
		$buttons.map( function() {
			jQuery( this ).addClass( 'tsfem-button-disabled' );
			jQuery( this ).prop( 'disabled', true );
		} );

		//* Reset ajax loader
		tsfem.resetAjaxLoader( loader );

		//* Set ajax loader.
		tsfem.setAjaxLoader( loader );

		//* Setup external update.
		var settings = {
			method: 'POST',
			url: ajaxurl,
			datatype: 'json',
			data: {
				'action' : 'tsfem_update_extension',
				'nonce' : tsfem.nonce,
				'slug' : actionSlug,
				'case' : actionCase,
			},
			timeout: 10000,
			async: true,
			success: function( response ) {

				response = jQuery.parseJSON( response );

				var status = response.status['success'],
					notice = response.status['notice'];

				if ( -1 === status ) {
					//* Erroneous input.
					tsfem.updatedResponse( loader, 0, notice );
				} else {
					if ( 'activate' === actionCase ) {
						if ( false === status ) {
							/**
							 * Not activated as no extension has been put in.
							 * This should never happen.
							 */
							tsfem.updatedResponse( loader, 0, notice );
						} else {
							switch ( status ) {
								case 10001 :
									//* No extensions checksum found.
									tsfem.updatedResponse( loader, 0, notice );
									break;

								case 10002 :
									//* Extensions checksum mismatch.
									tsfem.updatedResponse( loader, 0, notice );
									break;

								case 10003 :
									//* Account isn't allowed to use premium extension.
									tsfem.updatedResponse( loader, 0, notice );
									break;

								case 10004 :
									//* Option update failed for unknown reason. Maybe overload.
									tsfem.updatedResponse( loader, 2, notice );
									break;

								default :
									//* Extension is activated.
									$button.removeClass( 'tsfem-button-extension-activate' );
									$button.addClass( 'tsfem-button-extension-deactivate' );
									$button.data( 'case', 'deactivate' );
									$button.text( tsfem.i18n['Deactivate'] );
									tsfem.updatedResponse( loader, 1, notice );
									break;
							}
						}
					} else if ( 'deactivate' === actionCase ) {
						if ( false === status ) {
							//* Not deactivated.
							tsfem.updatedResponse( loader, 0, notice );
						} else {
							//* Deactivated.
							$button.removeClass( 'tsfem-button-extension-deactivate' );
							$button.addClass( 'tsfem-button-extension-activate' );
							$button.data( 'case', 'activate' );
							$button.text( tsfem.i18n['Activate'] );
							tsfem.updatedResponse( loader, 1, notice );
						}
					} else {
						//* Erroneous input.
						tsfem.updatedResponse( loader, 0, '' );
					}
				}
			},
			error: function() {
				tsfem.updatedResponse( loader, 0, '' );
			},
			complete: function() {
				$buttons.removeClass( 'tsfem-button-disabled' );
				$buttons.prop( 'disabled', false );
			},
		}

		jQuery.ajax( settings );
	},

	/**
	 * Visualizes the AJAX response to the user.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 * @param {Integer} success 0 = error, 1 = success, 2 = unknown but success.
	 * @param {String} notice The updated notice.
	 */
	updatedResponse: function( target, success, notice ) {
		'use strict';

		switch ( success ) {
			case 0 :
				tsfem.unsetAjaxLoader( target, 0, notice );
				break;
			case 1 :
				tsfem.unsetAjaxLoader( target, 1, notice );
				break;
			case 2 :
				tsfem.unsetAjaxLoader( target, 2, notice );
				break;
			default :
				tsfem.resetAjaxLoader( target );
				break;
		}
	},

	/**
	 * Prevents browser default actions.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {jQuery.event} event
	 */
	preventDefault: function( event ) {
		event.preventDefault();
		event.stopPropagation();
	},

	/**
	 * Initialises all aspects of the scripts.
	 *
	 * Generally ordered with stuff that inserts new elements into the DOM first,
	 * then stuff that triggers an event on existing DOM elements when ready,
	 * followed by stuff that triggers an event only on user interaction. This
	 * keeps any screen jumping from occuring later on.
	 *
	 * @since 1.0.0
	 *
	 * @param {Object} jQ jQuery
	 * @function
	 */
	ready: function( jQ ) {
		'use strict';

		// Move the page updates notices below the top-wrap.
		jQ( 'div.updated, div.error, div.notice-warning' ).insertAfter( 'section.tsfem-top-wrap' );

		// AJAX feed update.
		jQ( 'a#tsfem-enable-feeds' ).on( 'click', tsfem.updateFeed );

		// AJAX extension update.
		jQ( 'a.tsfem-button-extension-activate, a.tsfem-button-extension-deactivate' ).on( 'click', tsfem.updateExtension );

	}
};
jQuery( tsfem.ready );
