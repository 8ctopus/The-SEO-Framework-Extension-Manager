/**
 * This file holds The SEO Framework Extension Manager plugin's JS code.
 * Serve JavaScript as an addition, not as a means.
 *
 * @author Sybre Waaijer https://cyberwire.nl/
 * @pluginURI https://wordpress.org/plugins/the-seo-framework-extension-manager/
 */

/**
 * The SEO Framework - Extension Manager plugin
 * Copyright (C) 2016 Sybre Waaijer, CyberWire (https://cyberwire.nl/)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name tsf-extension-manager.min.js
// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/jquery-1.9.js
// @js_externs /** @constructor */ function tsfem() {}; /** @type {Array|string} */ var tsfemL10n;
// ==/ClosureCompiler==
// http://closure-compiler.appspot.com/home

/* global tsfem, tsfemL10n  */

/**
 * Advanced Optimizations caused me to move away from dot annotations, as they
 * get wrongfully minified.
 */

/**
 * Holds tsfem values in an object to avoid polluting global namespace.
 *
 * @since 1.0.0
 *
 * @constructor
 */
window[ 'tsfem' ] = {

	/**
	 * @since 1.0.0
	 * @param {String} Ajax nonce
	 */
	nonce : tsfemL10n['nonce'],

	additionsClass : '',

	/**
	 * Visualizes AJAX loading time through target class change.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 */
	setAjaxLoader: function( target ) {
		'use strict';

		jQuery( target ).toggleClass( 'tsfem-loading' );
	},

	/**
	 * Adjusts class loaders on Ajax response.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 * @param {Boolean} success
	 */
	unsetAjaxLoader: function( target, success ) {
		'use strict';

		var $newclass = 'tsfem-success',
			$fade = 2500;

		if ( ! success ) {
			$newclass = 'tsfem-error';
			$fade = 5000;
		}

		jQuery( target ).removeClass( 'tsfem-loading' ).addClass( $newclass ).fadeOut( $fade );
	},

	/**
	 * Cleans and resets Ajax wrapper class and contents to default.
	 * Also stops any animation and resets fadeout to beginning.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 */
	resetAjaxLoader: function( target ) {
		'use strict';

		jQuery( target ).stop().empty().attr( 'class', 'tsfem-ajax' ).css( 'opacity', '1' ).removeAttr( 'style' );
	},

	/**
	 * Updates the counter type.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {jQuery.event} event
	 */
	updateFeed: function( event ) {
		'use strict';

		jQuery( event.target ).attr( 'disabled', true );

		var $target = '#tsfem-feed-ajax',
			$status = 0;

		//* Reset ajax loader
		tsfem.resetAjaxLoader( $target );

		//* Set ajax loader.
		tsfem.setAjaxLoader( $target );

		//* Setup external update.
		var settings = {
			method: 'POST',
			url: ajaxurl,
			datatype: 'json',
			data: {
				'action' : 'tsfem_enable_feeds',
				'nonce' : tsfem.nonce,
			},
			async: true,
			success: function( response ) {

				response = jQuery.parseJSON( response );

				//* I could do value check, but that will simply lag behind. Unless an annoying execution delay is added.
				if ( 'success' === response.type ) {
					$status = 1;
				//	jQuery( '.tsfem-trends-wrap' ).empty().hide().append( response.content ).slideDown( 600 ).fadeIn( 1000 );
					jQuery( '.tsfem-trends-wrap' ).empty().css( 'opacity', 0 ).append( response.content ).css( 'opacity', 1 ).children( '.tsfem-feed-wrap' ).css(
						{
							'opacity' : 0,
							'max-height' : '0px'
						}
					).animate(
						{
							'max-height' : '3000px',
							'opacity' : 1
						},
						{
							queue: true,
							duration: 2000
						},
						'swing'
					);
					setTimeout( function() { tsfem.feedUpdatedResponse( $target, $status ); }, 1000 );
				} else {
					jQuery( event.target ).attr( 'disabled', false );
					tsfem.feedUpdatedResponse( $target, $status );
				}
			},
		}

		jQuery.ajax( settings );
	},

	/**
	 * Visualizes the AJAX response to the user.
	 *
	 * @since 1.0.0
	 *
	 * @function
	 * @param {String} target
	 * @param {Integer} success
	 */
	feedUpdatedResponse: function( target, success ) {
		'use strict';

		switch ( success ) {
			case 0:
				tsfem.unsetAjaxLoader( target, false );
				break;
			case 1:
				tsfem.unsetAjaxLoader( target, true );
				break;
			default:
				jQuery(	$target ).resetAjaxLoader();
				break;
		}

	},

	/**
	 * Initialises all aspects of the scripts.
	 *
	 * Generally ordered with stuff that inserts new elements into the DOM first,
	 * then stuff that triggers an event on existing DOM elements when ready,
	 * followed by stuff that triggers an event only on user interaction. This
	 * keeps any screen jumping from occuring later on.
	 *
	 * @since 2.2.4
	 *
	 * @function
	 */
	ready: function() {
		'use strict';

		// Move the page updates notices below the top-wrap.
		jQuery( 'div.updated, div.error, div.notice-warning' ).insertAfter( 'section.tsfem-top-wrap' );

		// AJAX counter
		jQuery( '#tsfem-enable-feeds' ).on( 'click', tsfem.updateFeed );

	}

};
jQuery( tsfem.ready );
